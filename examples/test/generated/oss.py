from mongoengine import *

classes=[]
class oss_comment(Document):
    comment = StringField(required=True)
    time = IntField(required=True,help_text='epoch')
    author = IntField(required=True,help_text=' who created comment')
    author_name = StringField(required=True,help_text=' who created comment')
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_comment)

class oss_componenttype(Document):
    type = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_componenttype)

class oss_sprint(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    description = StringField(required=True)
    start = IntField(required=True,help_text='epoch')
    stop = IntField(required=True,help_text='epoch')
    organizations =  ListField(StringField(), default=list,help_text='organizations involved with this sprint')
    organizations_names = StringField(required=True,help_text='comma separated list of names of orgs')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_sprint)

class oss_ticket(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    description = StringField(required=True)
    priority = IntField(required=True,help_text='level 0-4 (4 is most urgent)')
    project = StringField(required=True,help_text='link to project')
    project_name = StringField(required=True)
    type = StringField(required=True)
    parent = StringField(required=True)
    parent_name = StringField(required=True)
    depends =  ListField(StringField(), default=list,help_text='this task depends on')
    depends_names =  ListField(StringField(), default=list,)
    deadline = IntField(required=True,help_text='epoch of when task needs to be done')
    duplicate =  ListField(StringField(), default=list,help_text='list of duplicates to this issue')
    duplicate_names =  ListField(StringField(), default=list,)
    taskowner = StringField(required=True,help_text='owner of task (user)')
    taskowner_name = StringField(required=True,help_text='owner of task (user)')
    source = StringField(required=True,help_text='owner of task (user)')
    source_name = StringField(required=True,help_text='name of user where request came from (can be email, username, ...)')
    sprint = StringField(required=True)
    sprint_name = StringField(required=True)
    organization = StringField(required=True,help_text=' link to organization if any')
    organization_name = StringField(required=True)
    nextstepdate = IntField(required=True,help_text='date for next day to continue with this ticket')
    workflow = StringField(required=True,help_text='current active workflow')
    job_status = StringField(required=True,help_text='values are:')
    jobs =  ListField(StringField(), default=list,help_text='link to workflows')
    time_created = IntField(required=True)
    time_lastmessage = IntField(required=True)
    time_lastresponse = IntField(required=True)
    time_closed = IntField(required=True)
    messages =  ListField(StringField(), default=list,help_text=' reference to message')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    datasources =  ListField(StringField(), default=list,help_text='source(s) where data comes from (reference)')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    params = StringField(required=True,help_text='json representation of dict which has all arguments required for this ticket')
classes.append(oss_ticket)

class oss_group(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    addresses =  ListField(StringField(), default=list,help_text='reference to addr')
    members =  ListField(StringField(), default=list,help_text='users in group (based on ids)')
    members_name =  ListField(StringField(), default=list,)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    contactmethods =  ListField(StringField(), default=list,help_text='reference to contactmethods')
    datasources =  ListField(StringField(), default=list,help_text='source(s) where data comes from (reference)')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
classes.append(oss_group)

class oss_service(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the service if any')
    organization_name = StringField(required=True)
    label = StringField(required=True)
    parent = IntField(required=True)
    parent_name = StringField(required=True)
    description = StringField(required=True)
    type = StringField(required=True)
    serviceports =  ListField(StringField(), default=list,)
    depends =  ListField(StringField(), default=list,help_text=' link to other services (what does it need to work)')
    depends_names =  ListField(StringField(), default=list,)
    machinehost = IntField(required=True,help_text='who is machine hosting this service')
    memory = IntField(required=True,help_text='in GB')
    ssdcapacity = IntField(required=True,help_text='in GB')
    hdcapacity = IntField(required=True,help_text='in GB')
    cpumhz = IntField(required=True,help_text='in mhz')
    nrcores = IntField(required=True)
    nrcpu = IntField(required=True)
    admin_name = StringField(required=True,help_text='name of admin e.g. admin or root')
    admin_passwd = StringField(required=True,help_text='encrypted root passwd')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_service)

class oss_serviceport(Document):
    id = IntField(required=True)
    serviceid = IntField(required=True)
    ipaddr = StringField(required=True,help_text=' e.g. 192.168.10.1/24')
    ipaddr6 = StringField(required=True)
    url = StringField(required=True)
    port = StringField(required=True)
    type = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_serviceport)

class oss_machine(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the machine if any')
    organization_name = StringField(required=True)
    label = StringField(required=True)
    parent = IntField(required=True)
    parent_name = StringField(required=True)
    description = StringField(required=True)
    type = StringField(required=True)
    interfaces =  ListField(StringField(), default=list,)
    depends =  ListField(StringField(), default=list,help_text=' link to other machines (what does it need to work)')
    depends_names =  ListField(StringField(), default=list,)
    assethost = IntField(required=True,help_text='who is asset hosting this machinehost')
    memory = IntField(required=True,help_text='in GB')
    ssdcapacity = IntField(required=True,help_text='in GB')
    hdcapacity = IntField(required=True,help_text='in GB')
    cpumhz = IntField(required=True,help_text='in mhz')
    nrcores = IntField(required=True)
    nrcpu = IntField(required=True)
    rootpasswd = StringField(required=True,help_text='encrypted root passwd')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_machine)

class oss_workflowstep(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    description = StringField(required=True)
    warningtime = IntField(required=True,help_text=' time that this step can take till warning (in sec)')
    criticaltime = IntField(required=True,help_text=' time that this step can take')
    nextsteps =  ListField(field=StringField(), default=list,)
    nextsteps_error =  ListField(field=StringField(), default=list,)
    jscript = StringField(required=True,help_text='this script will create jobsteps (like branches of a tree) and return all next jobsteps to execute')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_workflowstep)

class oss_asset(Document):
    id = IntField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the asset if any')
    organization_names = StringField(required=True,help_text='comma separated list of name')
    label = StringField(required=True)
    parent = StringField(required=True)
    parent_name = StringField(required=True)
    description = StringField(required=True)
    type = StringField(required=True)
    brand = StringField(required=True)
    model = StringField(required=True)
    interfaces =  ListField(StringField(), default=list,)
    components =  ListField(StringField(), default=list,)
    depends =  ListField(StringField(), default=list,help_text=' link to other assets (what does it need to work)')
    depends_names =  ListField(StringField(), default=list,)
    rack = StringField(required=True)
    datacenter_name = StringField(required=True)
    pod_name = StringField(required=True)
    rack_name = StringField(required=True)
    datacenter_label = StringField(required=True)
    pod_label = StringField(required=True)
    rack_label = StringField(required=True)
    u = IntField(required=True,help_text='how many U taken')
    rackpos = IntField(required=True,help_text=' how many U starting from bottomn')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_asset)

class oss_document(Document):
    id = IntField(required=True)
    parent = IntField(required=True,help_text='parent doc (where this document is a version of)')
    name = StringField(required=True)
    creationdate = IntField(required=True)
    moddate = IntField(required=True)
    type = StringField(required=True,help_text=' SPREADSHEET:DOC:TXT:CODE:...')
    ext = StringField(required=True,help_text=' e.g. docx;xls;...')
    contents = StringField(required=True,help_text='full text content')
    objstorid = StringField(required=True,help_text='reference on doc mgmt system (stored in sort of key value obj store)')
    description = StringField(required=True)
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_document)

class oss_assettype(Document):
    type = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_assettype)

class oss_workflow(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    tickettype = StringField(required=True)
    description = StringField(required=True)
    workflowsteps =  ListField(StringField(), default=list,)
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_workflow)

class oss_component(Document):
    type = StringField(required=True)
    nr = IntField(required=True,help_text='amount of component e.g. 2 CPU')
    brand = StringField(required=True)
    model = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_component)

class oss_job(Document):
    id = IntField(required=True)
    workflow = StringField(required=True)
    workflow_name = StringField(required=True)
    startdate = IntField(required=True,help_text='epoch')
    enddate = IntField(required=True,help_text='epoch')
    status = StringField(required=True,help_text='values are:')
classes.append(oss_job)

class oss_user(Document):
    id = IntField(required=True)
    organizations =  ListField(StringField(), default=list,)
    organization_names = StringField(required=True)
    name = StringField(required=True)
    addresses =  ListField(StringField(), default=list,help_text='reference to addr (guid)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    userids =  ListField(StringField(), default=list,)
    contactmethods =  ListField(StringField(), default=list,help_text='reference to contactmethods')
    datasources =  ListField(StringField(), default=list,help_text='source(s) where data comes from (reference)')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
classes.append(oss_user)

class oss_address(Document):
    id = IntField(required=True)
    country = StringField(required=True)
    city = StringField(required=True)
    citycode = StringField(required=True)
    zone = StringField(required=True)
    region = StringField(required=True)
    street = StringField(required=True)
    nr = IntField(required=True)
    floor = IntField(required=True)
classes.append(oss_address)

class oss_interface(Document):
    type = StringField(required=True)
    macaddr = StringField(required=True)
    vlanid = StringField(required=True)
    vxlanid = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the ipaddr if any')
    netaddr =  ListField(StringField(), default=list,)
    connects =  ListField(StringField(), default=list,help_text=' link to other interfaces')
    brand = StringField(required=True)
    model = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_interface)

class oss_contactmethod(Document):
    id = IntField(required=True)
    type = StringField(required=True)
    value = StringField(required=True,help_text='e.g. tel nr')
classes.append(oss_contactmethod)

class oss_jobstep(Document):
    jobguid = StringField(required=True,help_text='reference to job')
    workflow = StringField(required=True)
    workflowstep = StringField(required=True,help_text='reference to workflowstep which started this jobsteps')
    workflowstep_name = StringField(required=True)
    description = StringField(required=True)
    order = IntField(required=True,help_text='order in which the steps where executed')
    params = StringField(required=True,help_text='json representation of dict which has all arguments')
    warningtime = IntField(required=True,help_text=' time that this step can take till warning (in sec)')
    criticaltime = IntField(required=True,help_text=' time that this step can take')
    startdate = IntField(required=True)
    enddate = IntField(required=True)
    jscript = StringField(required=True,help_text='script which was executed')
    status = StringField(required=True,help_text='values are:')
    nextsteps =  ListField(StringField(), default=list,help_text='after resolving the script next steps which were triggered (so is after execution), is references to other jobsteps (guid)')
    logs = StringField(required=True)
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_jobstep)

class oss_brandtype(Document):
    type = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_brandtype)

class oss_datacenter(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    label = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns dc')
    organization_name = StringField(required=True)
    description = StringField(required=True)
    addresses =  ListField(StringField(), default=list,help_text='reference to addr')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_datacenter)

class oss_useridentification(Document):
    userid = IntField(required=True,help_text=' reference to user')
    type = StringField(required=True,help_text=' PASSPORT:ID:DRIVINGLICENSE')
    identificationnr = StringField(required=True,help_text='e.g. passport nr')
    registrationdate = IntField(required=True,help_text=' epoch')
    expirationdate = IntField(required=True,help_text=' epoch')
    description = StringField(required=True)
    status = StringField(required=True,help_text='VALID:EXPIRED:ERROR')
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_useridentification)

class oss_message(Document):
    subject = StringField(required=True)
    message = StringField(required=True)
    destination =  ListField(StringField(), default=list,)
    time = IntField(required=True,help_text='epoch')
    type = StringField(required=True,help_text='types are: email;sms;gtalk;tel')
    format = StringField(required=True,help_text=' html;confl;md;text default is text')
    ticket = IntField(required=True)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_message)

class oss_netaddr(Document):
    id = IntField(required=True)
    ipaddr = StringField(required=True,help_text=' e.g. 192.168.10.1/24')
    ipaddr6 = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_netaddr)

class oss_project(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    descr = StringField(required=True)
    organizations =  ListField(StringField(), default=list,help_text='which organizations is proj linked to')
    organizations_names = StringField(required=True,help_text='comma separated list of names of orgs')
    deadline = IntField(required=True,help_text='epoch of when task needs to be done')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_project)

class oss_interfacetype(Document):
    type = StringField(required=True)
    description = StringField(required=True)
    supportremarks = StringField(required=True)
    id = IntField(required=True,help_text='Auto generated id @optional')
classes.append(oss_interfacetype)

class oss_organization(Document):
    name = StringField(required=True,help_text='domain')
    id = IntField(required=True)
    description = StringField(required=True)
    companyname = StringField(required=True,help_text='optional name')
    parent = StringField(required=True,help_text='organization can belong to other organization')
    parent_name = StringField(required=True)
    addresses =  ListField(StringField(), default=list,help_text='reference to addresses (guid)')
    contactmethods =  ListField(StringField(), default=list,help_text='reference to contactmethod (guid)')
    vatnr = StringField(required=True)
    datasources =  ListField(StringField(), default=list,help_text='source(s) where data comes from (reference)')
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_organization)

class oss_pod(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    label = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the pod if any')
    organization_name = StringField(required=True)
    datacenter = StringField(required=True)
    datacenter_name = StringField(required=True)
    description = StringField(required=True)
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_pod)

class oss_rack(Document):
    id = IntField(required=True)
    name = StringField(required=True)
    label = StringField(required=True)
    pod = StringField(required=True)
    pod_name = StringField(required=True)
    datacenter = StringField(required=True)
    datacenter_name = StringField(required=True)
    organization = StringField(required=True,help_text='id of organization which owns the rack if any')
    organization_name = StringField(required=True)
    description = StringField(required=True)
    acl =  ListField(field=StringField(), default=list,help_text='dict where key is name of group; value is R/W/E (E=Execute)')
    comments =  ListField(StringField(), default=list,help_text='reference to comments')
classes.append(oss_rack)

